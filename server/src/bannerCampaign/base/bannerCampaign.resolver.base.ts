/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateBannerCampaignArgs } from "./CreateBannerCampaignArgs";
import { UpdateBannerCampaignArgs } from "./UpdateBannerCampaignArgs";
import { DeleteBannerCampaignArgs } from "./DeleteBannerCampaignArgs";
import { BannerCampaignFindManyArgs } from "./BannerCampaignFindManyArgs";
import { BannerCampaignFindUniqueArgs } from "./BannerCampaignFindUniqueArgs";
import { BannerCampaign } from "./BannerCampaign";
import { BannerFindManyArgs } from "../../banner/base/BannerFindManyArgs";
import { Banner } from "../../banner/base/Banner";
import { BannerClient } from "../../bannerClient/base/BannerClient";
import { BannerCampaignService } from "../bannerCampaign.service";

@graphql.Resolver(() => BannerCampaign)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class BannerCampaignResolverBase {
  constructor(
    protected readonly service: BannerCampaignService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BannerCampaign",
    action: "read",
    possession: "any",
  })
  async _bannerCampaignsMeta(
    @graphql.Args() args: BannerCampaignFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BannerCampaign])
  @nestAccessControl.UseRoles({
    resource: "BannerCampaign",
    action: "read",
    possession: "any",
  })
  async bannerCampaigns(
    @graphql.Args() args: BannerCampaignFindManyArgs
  ): Promise<BannerCampaign[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BannerCampaign, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BannerCampaign",
    action: "read",
    possession: "own",
  })
  async bannerCampaign(
    @graphql.Args() args: BannerCampaignFindUniqueArgs
  ): Promise<BannerCampaign | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BannerCampaign)
  @nestAccessControl.UseRoles({
    resource: "BannerCampaign",
    action: "create",
    possession: "any",
  })
  async createBannerCampaign(
    @graphql.Args() args: CreateBannerCampaignArgs
  ): Promise<BannerCampaign> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        client: {
          connect: args.data.client,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BannerCampaign)
  @nestAccessControl.UseRoles({
    resource: "BannerCampaign",
    action: "update",
    possession: "any",
  })
  async updateBannerCampaign(
    @graphql.Args() args: UpdateBannerCampaignArgs
  ): Promise<BannerCampaign | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          client: {
            connect: args.data.client,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BannerCampaign)
  @nestAccessControl.UseRoles({
    resource: "BannerCampaign",
    action: "delete",
    possession: "any",
  })
  async deleteBannerCampaign(
    @graphql.Args() args: DeleteBannerCampaignArgs
  ): Promise<BannerCampaign | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Banner])
  @nestAccessControl.UseRoles({
    resource: "Banner",
    action: "read",
    possession: "any",
  })
  async banners(
    @graphql.Parent() parent: BannerCampaign,
    @graphql.Args() args: BannerFindManyArgs
  ): Promise<Banner[]> {
    const results = await this.service.findBanners(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => BannerClient, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BannerClient",
    action: "read",
    possession: "any",
  })
  async client(
    @graphql.Parent() parent: BannerCampaign
  ): Promise<BannerClient | null> {
    const result = await this.service.getClient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
