/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateBannerClientArgs } from "./CreateBannerClientArgs";
import { UpdateBannerClientArgs } from "./UpdateBannerClientArgs";
import { DeleteBannerClientArgs } from "./DeleteBannerClientArgs";
import { BannerClientFindManyArgs } from "./BannerClientFindManyArgs";
import { BannerClientFindUniqueArgs } from "./BannerClientFindUniqueArgs";
import { BannerClient } from "./BannerClient";
import { BannerCampaignFindManyArgs } from "../../bannerCampaign/base/BannerCampaignFindManyArgs";
import { BannerCampaign } from "../../bannerCampaign/base/BannerCampaign";
import { BannerClientService } from "../bannerClient.service";

@graphql.Resolver(() => BannerClient)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class BannerClientResolverBase {
  constructor(
    protected readonly service: BannerClientService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BannerClient",
    action: "read",
    possession: "any",
  })
  async _bannerClientsMeta(
    @graphql.Args() args: BannerClientFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BannerClient])
  @nestAccessControl.UseRoles({
    resource: "BannerClient",
    action: "read",
    possession: "any",
  })
  async bannerClients(
    @graphql.Args() args: BannerClientFindManyArgs
  ): Promise<BannerClient[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BannerClient, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BannerClient",
    action: "read",
    possession: "own",
  })
  async bannerClient(
    @graphql.Args() args: BannerClientFindUniqueArgs
  ): Promise<BannerClient | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BannerClient)
  @nestAccessControl.UseRoles({
    resource: "BannerClient",
    action: "create",
    possession: "any",
  })
  async createBannerClient(
    @graphql.Args() args: CreateBannerClientArgs
  ): Promise<BannerClient> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BannerClient)
  @nestAccessControl.UseRoles({
    resource: "BannerClient",
    action: "update",
    possession: "any",
  })
  async updateBannerClient(
    @graphql.Args() args: UpdateBannerClientArgs
  ): Promise<BannerClient | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BannerClient)
  @nestAccessControl.UseRoles({
    resource: "BannerClient",
    action: "delete",
    possession: "any",
  })
  async deleteBannerClient(
    @graphql.Args() args: DeleteBannerClientArgs
  ): Promise<BannerClient | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [BannerCampaign])
  @nestAccessControl.UseRoles({
    resource: "BannerCampaign",
    action: "read",
    possession: "any",
  })
  async campaigns(
    @graphql.Parent() parent: BannerClient,
    @graphql.Args() args: BannerCampaignFindManyArgs
  ): Promise<BannerCampaign[]> {
    const results = await this.service.findCampaigns(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
