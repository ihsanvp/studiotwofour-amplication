/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateBannerArgs } from "./CreateBannerArgs";
import { UpdateBannerArgs } from "./UpdateBannerArgs";
import { DeleteBannerArgs } from "./DeleteBannerArgs";
import { BannerFindManyArgs } from "./BannerFindManyArgs";
import { BannerFindUniqueArgs } from "./BannerFindUniqueArgs";
import { Banner } from "./Banner";
import { Asset } from "../../asset/base/Asset";
import { BannerCampaign } from "../../bannerCampaign/base/BannerCampaign";
import { BannerService } from "../banner.service";

@graphql.Resolver(() => Banner)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class BannerResolverBase {
  constructor(
    protected readonly service: BannerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Banner",
    action: "read",
    possession: "any",
  })
  async _bannersMeta(
    @graphql.Args() args: BannerFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Banner])
  @nestAccessControl.UseRoles({
    resource: "Banner",
    action: "read",
    possession: "any",
  })
  async banners(@graphql.Args() args: BannerFindManyArgs): Promise<Banner[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Banner, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Banner",
    action: "read",
    possession: "own",
  })
  async banner(
    @graphql.Args() args: BannerFindUniqueArgs
  ): Promise<Banner | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Banner)
  @nestAccessControl.UseRoles({
    resource: "Banner",
    action: "create",
    possession: "any",
  })
  async createBanner(@graphql.Args() args: CreateBannerArgs): Promise<Banner> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        asset: {
          connect: args.data.asset,
        },

        campaigns: args.data.campaigns
          ? {
              connect: args.data.campaigns,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Banner)
  @nestAccessControl.UseRoles({
    resource: "Banner",
    action: "update",
    possession: "any",
  })
  async updateBanner(
    @graphql.Args() args: UpdateBannerArgs
  ): Promise<Banner | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          asset: {
            connect: args.data.asset,
          },

          campaigns: args.data.campaigns
            ? {
                connect: args.data.campaigns,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Banner)
  @nestAccessControl.UseRoles({
    resource: "Banner",
    action: "delete",
    possession: "any",
  })
  async deleteBanner(
    @graphql.Args() args: DeleteBannerArgs
  ): Promise<Banner | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Asset, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "any",
  })
  async asset(@graphql.Parent() parent: Banner): Promise<Asset | null> {
    const result = await this.service.getAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => BannerCampaign, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BannerCampaign",
    action: "read",
    possession: "any",
  })
  async campaigns(
    @graphql.Parent() parent: Banner
  ): Promise<BannerCampaign | null> {
    const result = await this.service.getCampaigns(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
